From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tyler Veness <calcmogul@gmail.com>
Date: Sat, 8 Feb 2025 13:42:36 -0800
Subject: [PATCH 2/2] Replace std::views::zip()

---
 include/sleipnir/autodiff/adjoint_expression_graph.hpp | 5 ++++-
 src/optimization/problem.cpp                           | 9 +++++----
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/include/sleipnir/autodiff/adjoint_expression_graph.hpp b/include/sleipnir/autodiff/adjoint_expression_graph.hpp
index 6fd47970f3e7d77b799e89064c5ce830aa4c752f..a326c8223f5efbead2b84a4a5aab7a57e4213dc4 100644
--- a/include/sleipnir/autodiff/adjoint_expression_graph.hpp
+++ b/include/sleipnir/autodiff/adjoint_expression_graph.hpp
@@ -158,7 +158,10 @@ class AdjointExpressionGraph {
         }
       }
     } else {
-      for (const auto& [col, node] : std::views::zip(m_col_list, m_top_list)) {
+      for (size_t i = 0; i < m_top_list.size(); ++i) {
+        const auto& col = m_col_list[i];
+        const auto& node = m_top_list[i];
+
         // Append adjoints of wrt to sparse matrix triplets
         if (col != -1 && node->adjoint != 0.0) {
           triplets.emplace_back(row, col, node->adjoint);
diff --git a/src/optimization/problem.cpp b/src/optimization/problem.cpp
index 09828cdb6d7cddff692b9d17603dc0c11cd5a3ec..0cdcc9a898e46c5ab56a2ebbc0e8d2b8b652873a 100644
--- a/src/optimization/problem.cpp
+++ b/src/optimization/problem.cpp
@@ -6,7 +6,6 @@
 #include <cmath>
 #include <memory>
 #include <optional>
-#include <ranges>
 #include <utility>
 
 #include <Eigen/Core>
@@ -368,9 +367,11 @@ void Problem::print_problem_analysis() {
         for (const auto& constraint : constraints) {
           ++counts[std::to_underlying(constraint.type())];
         }
-        for (const auto& [count, name] :
-             std::views::zip(counts, std::array{"empty", "constant", "linear",
-                                                "quadratic", "nonlinear"})) {
+        for (size_t i = 0; i < counts.size(); ++i) {
+          constexpr std::array names{"empty", "constant", "linear", "quadratic",
+                                     "nonlinear"};
+          const auto& count = counts[i];
+          const auto& name = names[i];
           if (count > 0) {
             slp::println("  â†³ {} {}", count, name);
           }
